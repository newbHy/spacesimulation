#include "vector.h"

#include <complex>



////////////////////////////////////////////////////////////////////////////////
Vector::Vector()
  : x(0.0),
    y(0.0),
    z(0.0)
{
    //ctor
}


////////////////////////////////////////////////////////////////////////////////
Vector::Vector(sfSpace::PRECISE px, sfSpace::PRECISE py, sfSpace::PRECISE pz)
  : x(px),
    y(py),
    z(pz)
{

}


////////////////////////////////////////////////////////////////////////////////
Vector::~Vector()
{
    // ...
}



////////////////////////////////////////////////////////////////////////////////
Vector2D::Vector2D() : x(0.0), y(0.0)
{
    // ...
}



////////////////////////////////////////////////////////////////////////////////
Vector operator+(const Vector &lhs, const Vector &rhs)
{
    Vector result(lhs);

    result.x += rhs.x;
    result.y += rhs.y;
    result.z += rhs.z;

    return result;
}


////////////////////////////////////////////////////////////////////////////////
Vector operator-(const Vector &lhs, const Vector &rhs)
{
    Vector result(lhs);

    result.x -= rhs.x;
    result.y -= rhs.y;
    result.z -= rhs.z;

    return result;
}


////////////////////////////////////////////////////////////////////////////////
Vector2D::Vector2D(sfSpace::PRECISE px, sfSpace::PRECISE py)
  : x(px),
    y(py)
{
    // ...
}


////////////////////////////////////////////////////////////////////////////////
Vector2D::Vector2D(const Vector& copyvector)
  : x(copyvector.x),
    y(copyvector.y)
{
    // ...
}


////////////////////////////////////////////////////////////////////////////////
Vector2D::~Vector2D()
{
    // ...
}


////////////////////////////////////////////////////////////////////////////////
Vector2D& Vector2D::operator+=(const Vector2D& rhs)
{
    this->x += rhs.x;
    this->y += rhs.y;
    return *this;
}


////////////////////////////////////////////////////////////////////////////////
Vector2D& Vector2D::operator-=(const Vector2D& rhs)
{
    this->x -= rhs.x;
    this->y -= rhs.y;
    return *this;
}


////////////////////////////////////////////////////////////////////////////////
Vector2D& Vector2D::operator*=(const sfSpace::PRECISE& rhs)
{
    this->x *= rhs;
    this->y *= rhs;
    return *this;
}


////////////////////////////////////////////////////////////////////////////////
Vector2D operator-(const Vector2D &lhs, const Vector2D &rhs)
{
  Vector2D result(lhs);

  result.x -= rhs.x;
  result.y -= rhs.y;

  return result;
}


////////////////////////////////////////////////////////////////////////////////
Vector2D operator+(const Vector2D &lhs, const Vector2D &rhs)
{
  Vector2D result(lhs);

  result.x += rhs.x;
  result.y += rhs.y;

  return result;
}


////////////////////////////////////////////////////////////////////////////////
sfSpace::PRECISE Vector2D::length()
{
    return std::sqrt(x*x + y*y);
}
